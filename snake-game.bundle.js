(window.webpackJsonp=window.webpackJsonp||[]).push([[2],[,,function(t,n,e){"use strict";e.r(n);var o=e(4),r=e.n(o),c=()=>{const t=document.querySelector("canvas"),n=t.getContext("2d"),e=8,o=80,r=e*o,c=80*e;t.width=r,t.height=c;const i=2*e,s=2*e;let l=o/2*e,u=40*e,a="top",f=60,d=null,y=0;const x=[{x:l,y:u+2*e},{x:l,y:u+e},{x:l,y:u}];let h=[];function b(){++y%5==0&&h.push({x:w()+e/2,y:w()+e/2}),function(t){let n=function(t,n){switch(t){case"top":n.y-=e;break;case"right":n.x+=e;break;case"bottom":n.y+=e;break;case"left":n.x-=e}return n}(t,{x:l,y:u});l=n.x,u=n.y,x.shift(),x.push({...n,dir:t})}(a),function(){const t=p();let n,o;t.x<0&&(n=r-e);t.x>r&&(n=0);t.y<0&&(o=c-e);t.y>c&&(o=0);!function(t,n){const e=p();null==t&&(t=e.x);void 0!==n&&null!==t||(n=e.y);e.x=l=t,e.y=u=n}(n,o)}(),m(),function(){const t=h.find(t=>x.some(n=>n.x<=t.x&&t.x<=n.x+i&&n.y<=t.y&&t.y<=n.y+s));if(t){h=h.filter(n=>n!==t);const n=x[0].dir;x.unshift({dir:n,...x[0]}),m()}}(),x.slice(0,-1).find(t=>t.x===l&&t.y===u)&&alert("Game over")}function p(){return x[x.length-1]}function m(){n.clearRect(0,0,r,c);for(let{x:t,y:e}of x)n.beginPath(),n.fillStyle="green",n.fillRect(t,e,i,s),n.fill(),n.stroke();for(let{x:t,y:o}of h){const r=e/2;n.beginPath(),n.fillStyle="#FF0000",n.arc(t,o,r,0,2*Math.PI,!1),n.fill(),n.stroke()}}function w(){return Math.floor(Math.random()*o)*e}b(),y++,d=setInterval(b,f),document.body.addEventListener("keydown",({key:t})=>{const n={w:"top",ArrowTop:"top",d:"right",ArrowRight:"right",s:"bottom",ArrowBottom:"bottom",a:"left",ArrowLeft:"left"};if(n[t]){const e=a,o=n[t];if(function(t){switch(t){case"top":return"bottom";case"right":return"left";case"bottom":return"top";case"left":return"right"}}(o)===e)return;a=o}}),document.querySelector(".menu__btn-pause").addEventListener("click",function(){clearInterval(d)})};e.d(n,"default",function(){return r.a}),e.d(n,"script",function(){return c})},,function(t,n){t.exports='\x3c!-- Написал основную часть за час (не знал как использовать канвас) --\x3e\n\n<div style="display: flex; justify-content: center; align-items: center; flex-direction: column;">\n  <button class="menu__btn-pause">\n    Pause\n  </button>\n  <canvas></canvas>\n</div>\n\n<style>\n  canvas {\n    background: white;\n    border: 4px solid black;\n    border-radius: 25px;\n  }\n</style>\n'}]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,